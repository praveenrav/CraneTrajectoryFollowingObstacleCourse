%READ_ME.m
% This file contains the headers from all of the
% functions in the Input Shaping Toolbox.
% For a brief description of all the functions in this
% toolbox, see CONTENTS.M
%
% [T,V,P] = acc2trap(Accel,dt)
%
% Calculate a shaped trapezoidal trajectory (both 
% velocity and position) using an acceleration table
% The table is generated by GETACCEL.
%
% Parameters:
% Accel - Acceleration Table from GETACCEL
% dt - time step for system (sec/step)
%
% Returns:
% T - A time vector [0 dt 2dt ....];
% V - A velocity vector.
% P - A position vector.
% All outputs have the same length.
%
% See also GETACCEL.
%
%ACTTF.M
% Actuator laplace transform analysis for systems with and without
% prefilters.
% For a system without a prefilter the transfer function from the
% reference input to the actuator is given by CLS(s)/OLP(s) where
% CLS(s) is the closed loop sysstem response transfer function.
% OLP(s) is the open loop system response transfer function.
% For a system with a prefilter the transfer function from the
% reference input to the actuator is given by PRE(s)*CLS(s)/OLP(s)
% where PRE(s) is the prefilter transfer function.
%
% CIRCLE.M
% plots the root locations of the polynomial around in the unit circle
%
% CIRCLEP.M
% plots the root locations of the polynomial around in the unit circle
%
% con2dig CONTINUOUS2DIGITAL Put a continuous sequence in digital
%  sequence form.
%
% dseq = con2dig(cseq,dt)
%
% A continuous sequence is an n*2 matrix with times (sec) in
%  the first column and amplitudes in the second column.
% A digital sequence as a vector of amplitudes, where each
%  value corresponds to a time step.  The vector has length
%  n = Time_Of_Last_Impulse/dt.
%
% Parameters:
%  cseq, the continuous sequence.  Assumes that the 
%   continuous sequence is spaced at intervals of dt.
%  dt, the time step for the digital sequence.
% 
% Returns:
%  dseq, the digital sequence.
%
% See also DigitizeSeq, Digital2Continuous
%
% Convolve(Input,Shaper,deltaT) -- Bill Singhose
% Covolves Input and Shaper and returns the result ShapedInput.
% A time vector, T, which has the same number of rows as
% ShapedInput is also returned. T starts at zero and is incremented
% deltaT each step.
% Input can be an nxm matrix,where m is the number of inputs.
% Shaper must be a row or column vector.
%
% Function CRMETRIC(a,b,c,d,T)
%       [FIRy,FIRact,PRE,TFIR,resid,s]=crmetric(a,b,c,d,T)
%	"Controller Redesign Metric"
%	Given a continuous system description [a,b,c,d], where
%	the first and second outputs are position and actuator
%	effort, computes the FIR components of the response for
%	the two outputs and the overall prefilter time period TFIR
%
% DIG2CON Put a digital sequence in continuous sequence form.
%
% cseq = dig2con(dseq,dt)
%
% A continuous sequence is an n*2 matrix with times (sec) in
%  the first column and amplitudes in the second column.
% A digital sequence as a vector of amplitudes, where each
%  value corresponds to a time step.  The vector has length
%  n = Time_Of_Last_Impulse/dt.
%
% Parameters:
%  dseq, the digital sequence.
%  dt, the time step for the digital sequence.
% 
% Returns:
%  cseq, the continuous sequence.
%
% seq = DIGEI5(dt,freq,zeta,vlim)
% Find an exact digital Extra-Insensitive shaper.
% Uses matrix inversion technique.
%
% digseq - Whit Rappole
% DIGITIZESEQ Map a sequence onto digital timing loop
% dseq = digseq(seq,step)
%
% Uses a linear extrapolation to split each continuous
% impulse into two digital impulses
%
% seq = DigSeq(dt,freq,zeta)
%
% Finds a digital ZVD shaper by linearizing
% the times to the nearest two time discrete time steps and
% then inverting the matrix of the original equations
%
% seq = DigZVD5(dt,freq,zeta)
% Finds a digital ZVD shaper by linearizing
% the times to the nearest two time discrete time steps and
% then inverting the matrix of the original equations
%
%function dvd(amp,freq,zeta,dt)
% or vd(digital_shaper,freq,zeta,dt)
% creates a vector diagram based on the
% provided f (natural frequency in hertz)
% and the time step (dt) and amplitudes of the pulses
%
%  Mapping is ->  theta = w*time
%  So each vector amp[i],time[i] has a corresponding
%  position in the vector diagram.
%
%  Currently only handles positive vectors amp = [0 to 1]
%
% EI(fd,z,V,deltaT) -- Bill Singhose
% Generates an EI shaper for 1 mode.
% The solution comes from a surface fit to data calculated with GAMS.
% The shaper works well over the ranges of 0<V<.2 ans 0<z<.25
% fd - damped frequency (Hz) of vibration being controlled.
% z - damping ratio of vibration being controlled.
% V - vibration limit, for 5% vibration, Vlim=0.05.
% deltaT - time spacing at which input to system is updated.
%
%% EI2HUMP
% Generates a two-hump EI shaper
% f - frequency (Hz) of vibration being controlled.
% V - vibration limit
% deltaT - time spacing at which input to system is updated.
%
% This function generates the exact sequence and then uses
% DigSeq to convert the exact sequence to digital format.
%
%% EI2M_DMP(fd1,fd2,z1,z2,V1,V2,deltaT) -- Bill Singhose
% Generates an EI shaper for 2 modes.
% The solution comes from a surface fit to data calculated with GAMS.
% The shaper works well over the ranges of 0<V<.2 ans 0<z<.25
% The shapers for each mode are convolved together to give the
% final shaper.
% fd1,fd2 - frequency (Hz) of damped vibration being controlled.
% zeta1,zeta2 - damping ratios of vibration being controlled.
% Vlim1,Vlim2 - vibration limits, for 5% vibration, Vlim=0.05.
% deltaT - time spacing at which input to system is updated.
%
%% EI2M_UND(f1,f2,Vlim1,Vlim2,deltaT) -- Bill Singhose
% Generates an EI shaper 2 UNDAMPED modes.
% (The vibration at the modeling frequency is limited to Vlim
%  and the insensitivity is maximized)
% The shapers for each mode are convolved together to give the
% final shaper.
% f1,f2 - frequency (Hz) of vibration being controlled.
% Vlim1,Vlim2 - vibration limits, for 5% vibration, Vlim=0.05.
% deltaT - time spacing at which input to system is updated.
%
%% EI3HUMP
% Generates a three-hump EI shaper
% f - frequency (Hz) of vibration being controlled.
% V - vibration limit
% deltaT - time spacing at which input to system is updated.
%
% This function generates the exact sequence and then uses
% DigSeq to convert the exact sequence to digital format.
%
%% EI_UNDMP(f,Vlim,deltaT) -- Bill Singhose
% Generates an EI shaper for 1 UNDAMPED mode.
% (The vibration at the modeling frequency is limited to Vlim
%  and the insensitivity is maximized)
% f - frequency (Hz) of vibration being controlled.
% Vlim - vibration limit, for 5% vibration, Vlim=0.05.
% deltaT - time spacing at which input to system is updated.
%
%% getaccel(seq,vmax,amax,des,dt)
%
% Get an acceleration matrix for calculating shaped
% trapezoidal trajectories using changing accelerations.
%
%% GPLANE.M
% G plane analysis of the response of a second order system to damped
% sinusoid inputs.
%
%% MDSIZER - Point to Point move profile based on a given Acceleration Pulse
%	[x,v,a,nd]=mdsizer(Dist,AccSeq,T)
%	For an AccSeq [1 1 1 ... 1 1 1], mdsizera generates a trapezoidal
%	velocity profile.
%
%   INPUTS:
%
%	Dist   - move distance
%       AccSeq - acceleration sequence
%	T      - sample period
%
%   OUTPUTS:
%
%	x - position
%	v - velocity
%	a - acceleration
%      nd - sample delay before start of second pulse.	
%
% NOTE: the derivation involved using the final value theorem and in
%       the model used, zero order holds were assumed.
%
% An arbitrary acceleration pulse is combined with a negative and delayed
% (by nd samples) version of the pulse to generate the overall
% acceleration profile.  If the desired move distance (dist) cannot be
% achieved with an integer delay (nd), then the delay is rounded up to
% the next integer value and the acceleration pulse scaled down to meet 
% the desired move distance (dist).  Note that for very short moves, (nd)
% approaches zero, and the length of the overall acceleration profile
% approaches that of the arbitrary acceleration pulse.  This function is
% designed to be used with acceleration pulses that have built in
% vibration cancellation and this is why the pulse shape is not modified 
% in the case of short moves.
% Note, the length of the sequences [x], [v], and [a] are different due 
% to a pole/zero cancellation that occurs during integration.
%
%% MDSIZERJ - Point to Point move profile based on a given Jerk Sequence
%	[x,v,a,nd]=mdsizer(Dist,JerkSeq,T)
%	For a JerkSeq [1 0 0 ... 0 0 -1], mdsizer generates a trapezoid
%	velocity profile.
%
%   INPUTS:
%
%	Dist    - move distance
%	JerkSeq - jerk sequence
%	T	- sample period
%
%   OUTPUTS:
%
%	x - position
%	v - velocity
%	a - acceleration
%      nd - number of sample delays between start of pulses
%
% NOTE: the derivation involved using the final value theorem and in
%       the model used, zero order holds were assumed.
%
% An arbitrary acceleration pulse is combined with a negative and delayed
% (by nd samples) version of the pulse to generate the overall
% acceleration profile.  If the desired move distance (dist) cannot be
% achieved with an integer delay (nd), then the delay is rounded up to
% the next integer value and the acceleration pulse scaled down to meet 
% the desired move distance (dist).  Note that for very short moves, (nd)
% approaches zero, and the length of the overall acceleration profile
% approaches that of the arbitrary acceleration pulse.  This function is
% designed to be used with acceleration pulses that have built in
% vibration cancellation and this is why the pulse shape is not modified 
% in the case of short moves.
% Note, the length of the sequences [x], [v], and [a] are different due 
% to a pole/zero cancellation that occurs during integration.
%
%% NEG2MZVD(f1,dt)
% NEG2MZVD Generates a negative 2 mode ZVD shaper
% based on Rappole equations
%
% f1 - Frequency to shape for (Hz.)
% deltaT - Time spacing (sec/step)
%
%% NEGEI(f,zeta,V,PdeltaT)-- Bill Singhose
% Generates a negative Extra-Insensitive shaper for 1 mode.
%
% Returns the digital sequence by default, and
% the exact sequence as the second variable:
% eg: to generate the exact shaper, use:
%		  [dig_shaper,exact_shaper]=singer13(f,z,0.01)
%	note:  the 0.01 is ignored for the exact shaper and 
%	       dig_shaper can be ignored
%
%  to Return the digital sequence, use:
%		dig_shaper=singer13(f,z,0.001)
%
% f - frequency (Hz) of vibration being controlled.
% zeta - damping ratio of vibration being controlled.
% V - Vibration Limit
% P - Input Peak
% deltaT - time spacing at which input to system is updated.
%
% This function generates the exact sequence and then uses
% DigitizeSeq to convert the exact sequence to digital format.
%
%% negzv(f,zeta,deltaT)-- Bill Singhose
% Generates a negative ZV shaper for 1 mode.
%
% Returns the digital sequence by default, and
% the exact sequence as the second variable:
%
%  to Return the digital sequence, use:
%		dig_shaper=negzv(f,z,0.001)
%
% f - frequency (Hz) of vibration being controlled.
% zeta - damping ratio of vibration being controlled.
% P - Input Peak
% deltaT - time spacing at which input to system is updated.
%
% This function generates the exact sequence and then uses
% DigitizeSeq to convert the exact sequence to digital format.
%
%% NEGZVD(f,zeta,deltaT)-- Bill Singhose
% Generates a negative ZVD shaper for 1 mode.
%
% Returns the digital sequence by default, and
% the exact sequence as the second variable:
% eg: to generate the exact shaper, use:
%		  [dig_shaper,exact_shaper]=singer13(f,z,0.01)
%	note:  the 0.01 is ignored for the exact shaper and 
%	       dig_shaper can be ignored
%
%  to Return the digital sequence, use:
%		dig_shaper=singer13(f,z,0.001)
%
% f - frequency (Hz) of vibration being controlled.
% zeta - damping ratio of vibration being controlled.
% P - Input Peak
% deltaT - time spacing at which input to system is updated.
%
%% NMASSSYS  [a,b,c,d]=nmasssys(m,k,gains)
% 	Creates a state space model of an n mass system and returns
%	the [a,b,c,d] matrices of the system.
%	[m] is a vector of masses (the input force acts on mass m(1)).
%	[gains] is a vector of feedback gains, (+) for neg feedback;
%	    to build a model without feedback use a null matrix []
%           for gains.
%	    
%	[k] is a vector of springs between the masses; k(1) is 
%	    between masses m(1) and m(2); a picture follows:
%
%	F-->m(1)--k(1)--m(2)--k(2)--m(3)--...
%
%	System output y = [x1 act]'
%
%	Where: 	act - force output of ideal actuator acting on mass 1;
%                     the transfer function of the actuator is 1/1.
%		x1  - position of the mass being pushed by act (m[1]).
%
%	If "gains" exists, then negative feedback of the states
%       x1dot,x1,x2dot,x2,... is included in the state space model.
%
%% [PN,wn]=NORMP(P1)
% Normalizes a characteristic polynomial such
% that there are decending powers of S from the left and decending
% powers of W from the right (rightmost and leftmost coefficients are
% always unity.  Returns the normalized polynomial and the WN used in
% the normalization.  Polynomials should be entered such that the
% coefficient of the highest power of S is unity.
%
%% PRESR.M
% Step response for second order systems (res) and step response for
% second order systems with a three impulse prefilter (resp)
%
%% PRETF(Z,W,S) evaluates the transfer fuction of a three impulse prefilter
% designed for a system with the given z and w, at the given value of
% the complex variable s.
%
%% RAP2MZV(f1,f2,deltaT) -- Bill Singhose
% Generates a 2 mode ZV shaper based on 
% Rappole equations for 2 undamped modes.
% Do not use this for frequency ratios over 3.76679 - it will
% result in gains larger than one.
% f1, f2 - frequencies(Hz) of vibration being controlled
% deltaT - time spacing at which input to system is updated
%
%% RAP2MZVD(f1,f2,deltaT) -- Bill Singhose
% Generates a 2 Mode ZVD shaper on based Rappole equations 
% for 2 undamped modes.
% Do not use this for frequency ratios over 3.76679 - it will
% result in gains larger than one.
% f1, f2 - frequencies(Hz) of vibration being controlled
%
%% seq = Rapp9Seq(dt,f1,z1,f2,z2)
% Find an exact digital sequence found with Rappole 2-modes,
%  5-impulse constraints.
% Uses matrix inversion technique.
%
%% RESID.M
% residue analysis of dynamic systems
%
%% sensplot  Plot the residual over range of frequencies
%
% list = sensplot(seq,fmin,fmax,zeta,points)
%
% seq is the shaping sequence
% fmin is the low end of the frequency range
% fmax is the high end of the frequency range
% zeta is the damping ratio of the system
% points is the number of points to calculate
%
%% SEQUENCECONVOLVE Convolve two continuous sequences together.
%
% seq = seqconv(seq1,seq2)
%
% Convolves two sequences together.  
% A Sequence is an n*2 matrix with impulse times (sec) in
% the first column and amplitudes in the second column.
% 
% Parameters: 
%  seq1, seq2 the two sequences to convolve together.
%
% Returns:
%  seq, the sequence resulting from the convolution.
%
%% SEQUENCESORT  Sort a continuous sequence into correct 
%  order and combine impulses at the same time.
%
% sortedseq = seqsort(unsortedseq)
%
% A sequence is an n*2 matrix with times (sec) in the first
%  column and amplitudes in the second column.
%
% PARAMETERS:
%  unsortedseq is the continuous sequence to sort
%
% RETURNS:
%  sortedseq, the sorted sequence.
%
%%Shapers.m
% This file gives a brief description of the properties of the
% various shapers available in the Input Shaping Toolbox.   
%
%% ShapGen -- 
% This programs Generates an Input Shaper
% from user supplied parameters
%
%% shapres  Calculate the residual for a given freq and zeta
%
% num = shapres(seq,freq,zeta)
%
% seq is the sequence being used
% freq is the frequency of the system, Hz.
% zeta is the damping ratio
%
%% SPEEDCRM Speedy version of the controller redesign metric used
%	to compute the residuals associated with residual vibration
%	PRE - given prefilter
%	T   - sample period
% a,b,c,d   - state space system description
%
%     resy  - vector of residuals for each Q2CxPole for output y.
% Q2CxPoles - vector of complex poles in the 2nd quadrant
%
% [resy,Q2CxPoles]=speedcrm(PRE,T,a,b,c,d)
%
% This function is on the fringe of numerical stability, speedy,
% and compact.  The parameter delta is how far away from the 
% actual pole that the "residual" is being evaluated.  If we get 
% too close to the pole, we have a 0/0 numerical situation; if
% we get too far away from the pole we no longer approximate the 
% residual.  The delta used here (1e-7) was determined by varing
% delta from 1E-2 to 1E-12 without a change in the printed
% output (0.0000 accuracy).  1e-7 is midway between the two 
% values.
%
%% [T,P,V] = trapprof(endpos,curpos,amax,vmax,dt,steps)
%
% Whit Rappole
% Convolve, Inc.
% February 1, 1993
%
% c Copyright, 1993, Convolve, Inc.
% All Rights Reserved
%
% Generate position and velocity commands for a trapezoidal
% velocity profile.
%
% Parameters:
% endpos - Final position desired (in)
% curpos - Current position (in)
% amax - Maximum allowable acceleration (in/sec^2)
% vmax - Maximum allowable velocity (in/sec)
% dt - Time step for command string.
% steps - Total number of steps for command.
%
% Returns:
% T - Vector of times (sec)
% P - Vector of position commands (in)
% V - Vector of velocity commands (in/sec)
% T, P, and V are all of length STEPS
%
% If the desired motion requires more than STEPS time steps,
% TRAPEZOIDPROFILE returns [].
%
%%TRAP_RUL
% trap_rul uses the trapezoidal rule on a vector and
% returns the area, since the spacing on the x-axis
% is dt, the "area" returned is the sum of all the trapezoids
%
%% TWOMASS(w1,w2) returns a transfer function model for a two mass
% 	system with masses m1, m2 and a spring k between the masses.
%	w1^2=k/m1, w2^2=k/m2; the natural frequencies that correspond
%	to holding one mass fixed and twanging the other mass.
%	The transfer function is for a force input to mass m1 with
%	a displacement outputs at masses m1 and m2. (m1 case co-located)
%	The transfer functions are for x1/(F/m1), x2/(F/m1)
%
%%function vd(amp,time,freq,zeta)
% or vd(exact_shaper,freq,zeta)
% creates a vector diagram based on the
% provided f (natural frequency in hertz)
% and the times and amplitudes of the pulses
%
% returns the residual vibration x and y coordinates
%
%  Mapping is ->  theta = w*time
%  So each vector amp[i],time[i] has a corresponding
%  position in the vector diagram.
%
%  Currently only handles positive vectors amp = [0 to 1]
%
%% W_DIGSEQ Map a sequence onto digital timing loop
% dseq = W_DigSeq(seq,step,freq,zeta)
%
% Uses Watanabe's formula to split each continuous
% impulse into two digital impulses
% It is derived for Singer three impulse sequences.
%
% freq is the natural frequency in Hz.
% zeta is the damping ratio
% step is the time step of the timing loop, in sec.
% seq is the continuous sequence, an n x 2 matrix of 
%     times and amplitudes
%
%% ZV(f,zeta,deltaT) -- Bill Singhose
% Generates a ZV shaper for 1 mode.
% f - frequency (Hz) of vibration being controlled.
% zeta - damping ratio of vibration being controlled.
% deltaT - time spacing at which input to system is updated.
%
%% ZVD-2M -- Bill Singhose
% Generates a ZVD shaper for 2 modes.
% The shapers for each mode are convolved together to give the
% final shaper.
% f1,f2 - frequencies (Hz) of vibration being controlled.
% zeta1,zeta2 - damping ratios of vibration being controlled.
% deltaT - time spacing at which input to system is updated.
%
% Check to see if there is sufficient frequency seperation to
% justify using this filter.
%
%% ZVD(f,zeta,deltaT)-- Bill Singhose
% Generates a ZVD shaper for 1 mode.
%
% Returns the digital sequence by default, and
% the exact sequence as the second variable:
% eg: to generate the exact shaper, use:
%		  [dig_shaper,exact_shaper]=singer13(f,z,0.01)
%	note:  the 0.01 is ignored for the exact shaper and 
%	       dig_shaper can be ignored
%
%  to Return the digital sequence, use:
%		dig_shaper=singer13(f,z,0.001)
%
% f - frequency (Hz) of vibration being controlled.
% zeta - damping ratio of vibration being controlled.
% deltaT - time spacing at which input to system is updated.
%
%% ZVD2MD(f1,f2,zeta1,zeta2,deltaT) -- Bill Singhose
% Generates a damped 2 mode ZVD shaper 
% The solution presented here is the result of a curve fit to data
% generated by GAMS.  
% This shaper works well over the ranges of 1.2<r<2.8 and 0<z<.15
% fd1, fd2 - frequencies(Hz) of vibration being controlled
% zetas - damping ratios of low mode
% deltaT - time spacing at which input to system is updated
%
%% ZVDD -- Bill Singhose
% Generates a ZVDD shaper for 1 mode.
% f - frequency (Hz) of vibration being controlled.
% zeta - damping ratio of vibration being controlled.
% deltaT - time spacing at which input to system is updated.
%
% This function generates the exact sequence and then uses
% DigitizeSeq to convert the exact sequence to digital format.
%
%% only for ZERO DAMPING RIGHT NOW!!
% ZVDDD -- Bill Singhose
% Generates a ZVDDD shaper for 1 mode.
% f - frequency (Hz) of vibration being controlled.
% zeta - damping ratio of vibration being controlled.
% deltaT - time spacing at which input to system is updated.
%
% This function generates the exact sequence and then uses
% DigitizeSeq to convert the exact sequence to digital format.
